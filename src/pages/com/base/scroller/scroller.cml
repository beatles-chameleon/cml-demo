<template>
<page title="scroller">
    <view class="container">
    <scroller
        scroll-direction="{{scrollDirection}}"
        bottom-offset="{{bottomOffset}}"
        height="{{-1}}"
        c-bind:scrolltobottom="onBottom"
        c-bind:onscroll="onScroll"
        scroll-top="{{scrollTop}}"
    >
        <c-header title="scroller"></c-header>
        <view
            class="cell"
            c-for="{{panels}}"
            c-for-index="i"
            c-for-item="item"
            c-bind:tap="change"
            data-idx="{{i}}"
        >
            <view class="panel" style="{{item.computedStyle}}">
                <text class="text">{{item.label}}</text>
            </view>
        </view>
    </scroller>
    </view>
</page>
</template>
<script>
import cml from "cml-tt-api"
class Scroller {

  data = {
    /**
     * scroller 配置
     */
    bottomOffset: 20,
    scrollDirection: 'vertical',
    panels: [
    ],
    rows: [],
    scrollTop: 0
  }

  computed = {
  }

  watch  = {
  }

  methods = {
    change (e) {
        let target = e.currentTarget
        let dataset = target.dataset
        let i = dataset.idx

        const item = this.panels[i]
        if (item) {
            item.height = item.height === 200 ? 400 : 200
            item.width = item.width === 330 ? 730 : 330
            item.computedStyle = `height:${item.height}cpx;width:${item.width}cpx;background-color:${item.bgc};opacity:${item.opacity}`
        }
    },
    randomfn () {
        let ary = [];
        for(let i = 1; i<= 40; i++) {
            let item = {label: i ,height: 200 , width:730, bgc:'#69BE96',opacity:1}
            item.computedStyle = `height:${item.height}cpx;width:${item.width}cpx;background-color:${item.bgc};opacity:${item.opacity};`

            ary.push(item)
        }
        return ary;
    },
    onScroll(e) {
        // console.log('scroll');
    },
    onBottom(e) {
        console.log('onBottom');
    }
  }

  created(res) {
    this.panels = this.randomfn()

    for (let i = 0; i < 30; i++) {
      this.rows.push('row ' + i)
    }
    console.log('demo page created:', res)
  }
  mounted () {
    // setTimeout(() => {
    //     this.scrollTop = 2000;
    // }, 2000)
  }
}

export default new Scroller();
</script>
<style scoped>
.container {
  flex: 1;
  background: #f8f8f8;
}
.title {
  text-align: center;
  flex-direction: row;
  justify-content: center;
}
.panel {
    display: flex;
    margin: 10cpx;
    top:10cpx;
    align-items: center;
    justify-content: center;
    text-align: center;
    border: 1px solid #666;
    border-radius: 10cpx;
    transition-property: width,height;
    transition-duration: 0.5s;
    transition-delay: 0s;
    transition-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1.0);
}
.cell{
    display: flex;
    flex-direction: row;
}

.text {
    font-size: 60cpx;
    color: white;

}
</style>
<script cml-type="json">
{
    "base": {
        "usingComponents": {
           "c-header": "/components/header/header"
        },
        "navigationBarTitleText": "scroller",
        "backgroundTextStyle": "dark",
        "backgroundColor": "#E2E2E2"
    }
}
</script>
